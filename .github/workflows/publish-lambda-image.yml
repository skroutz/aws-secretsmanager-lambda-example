name: Publish Lambda Image to Amazon ECR

on:
  push:
    branches:
      - "main"
      - "develop/*"
    paths:
      - 'lambda-container/**'

  workflow_dispatch:

env:
  AWS_REGION: eu-central-1                 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: aws-secretsmanager-lambda-example-container           # set this to your Amazon ECR repository name
  ASSUME_ROLE: 'SkroutzSecretExampleLambdaDeployerRole'

permissions:
  contents: read

jobs:
  publish-lambda-container:
    name: Publish Lambda Container Image
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.ASSUME_ROLE }}
        role-duration-seconds: 900

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: publish-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        export REF=$(echo $GITHUB_REF | cut -d'/' -f 3)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./lambda-container -f ./lambda-container/Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$REF
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$REF
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"